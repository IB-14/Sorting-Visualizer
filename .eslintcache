[{"D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\index.js":"1","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\App.js":"2","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\reportWebVitals.js":"3","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Components\\SortingVisualizer\\Visualizer.jsx":"4","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Components\\Navbar\\Navbar.jsx":"5","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Components\\Footer\\Footer.jsx":"6","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Components\\BarContainer\\BarContainer.jsx":"7","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Algorithms\\mergeSort.jsx":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":386,"mtime":1611757347409,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":4824,"mtime":1611842527599,"results":"13","hashOfConfig":"10"},{"size":2023,"mtime":1611862216897,"results":"14","hashOfConfig":"10"},{"size":674,"mtime":1611934426515,"results":"15","hashOfConfig":"10"},{"size":695,"mtime":1611776868817,"results":"16","hashOfConfig":"10"},{"size":725,"mtime":1611776095938,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"5qa6kl",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\index.js",[],["38","39"],"D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\App.js",[],"D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\reportWebVitals.js",[],"D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Components\\SortingVisualizer\\Visualizer.jsx",["40"],"import React, {Component} from 'react';\r\nimport '../Navbar/Navbar';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport BarComponent from '../BarContainer/BarContainer';\r\nimport './Visualizer.css';\r\nimport {mergeSort} from '../../Algorithms/mergeSort'\r\n\r\nexport default class SortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            activeColor: \"#0EF0FB\"\r\n        };\r\n\r\n        this.divRef= React.createRef();\r\n    }\r\n\r\n        \r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    // shouldComponentUpdate() {\r\n    //     console.log(\"should\");\r\n    //     return true;\r\n    // }\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     console.log(\"fd\");\r\n    //     const {array}= this.state;\r\n    //     if(this.props.randomRender!==prevProps.randomRender) {\r\n    //         this.resetArray();\r\n    //         return (\r\n    //             <div className=\"background\">\r\n    //             <div className=\"stage\"></div>\r\n    //             <div className=\"container\">\r\n    //                 {array.map((value, index) => (\r\n    //                     <div className=\"bar\"\r\n    //                         key={index}\r\n    //                         style={{\r\n    //                             height: `${value}px`,\r\n    //                         }}></div>   \r\n    //                 ))}\r\n    //             </div>\r\n    //             </div>\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    resetArray() {\r\n        const array= [];\r\n        // let n= randomHeight(10, 50);\r\n        for(let i= 0; i<100/*n*/; i++) {\r\n            array.push(randomHeight(10, 250));\r\n        }\r\n        this.setState({array, activeColor: \"#0EF0FB\"});\r\n        document.getElementById('mergeS').classList.remove('activeBut');\r\n        document.getElementById('bubbleS').classList.remove('activeBut');\r\n        document.getElementById('insertionS').classList.remove('activeBut');\r\n        document.getElementById('selectionS').classList.remove('activeBut');\r\n        document.getElementById('quickS').classList.remove('activeBut');\r\n        document.getElementById('heapS').classList.remove('activeBut');\r\n\r\n        // var button= document.getElementsByClassName(\"sort-button\");\r\n        // button.classList.remove('activeBut');\r\n    }\r\n\r\n    bubble_sort = () => {\r\n        document.getElementById('bubbleS').classList.add('activeBut');\r\n    }\r\n\r\n    selection_sort = () => {\r\n        document.getElementById('selectionS').classList.add('activeBut');\r\n    }\r\n\r\n    insertion_sort = () => {\r\n        document.getElementById('insertionS').classList.add('activeBut');\r\n    }\r\n    \r\n\r\n    merge_sort = () => {\r\n        const sortedArray = mergeSort(this.state.array);\r\n        this.setState({array: sortedArray})\r\n        // console.log(sortedArray);\r\n        this.setState({activeColor: \"palegreen\"});\r\n        // const activeButton= this.activeButStyles();\r\n        // this.divRef.current.style= activeButton;\r\n        document.getElementById('mergeS').classList.add('activeBut');\r\n        // console.log(activeButton);\r\n    }\r\n\r\n    quick_sort = () => {\r\n        document.getElementById('quickS').classList.add('activeBut');\r\n    }\r\n\r\n    heap_sort = () => {\r\n        document.getElementById('heapS').classList.add('activeBut');\r\n    }\r\n\r\n    render() {\r\n        \r\n        const {array}= this.state;\r\n\r\n        if(this.state.randomRender===true) {\r\n            this.resetArray();\r\n        }\r\n        console.log(this.state.activeBut);\r\n        return (\r\n            <>\r\n            <Navbar array={this.state.array} resetArray={this.resetArray.bind(this)} />\r\n            <div className=\"background\">\r\n            <div className=\"stage\"></div>\r\n            <BarComponent array={this.state.array} barColor={this.state.activeColor}/>\r\n            <div className=\"but-wrap\">\r\n                <div className=\"sort-button rem\" id=\"bubbleS\" tabindex=\"1\" onClick={this.bubble_sort}>Bubble Sort</div>\r\n                <div className=\"sort-button rem\" id=\"selectionS\" tabindex=\"2\" onClick={this.selection_sort}>Selection Sort</div>\r\n                <div className=\"sort-button rem\" id=\"insertionS\" tabindex=\"3\" onClick={this.insertion_sort}>Insertion Sort</div>\r\n                <div className=\"sort-button rem\" id=\"mergeS\" tabindex=\"4\" onClick={this.merge_sort} /*ref={this.divRef}*/>Merge Sort</div>\r\n                <div className=\"sort-button rem\" id=\"quickS\" tabindex=\"5\" onClick={this.quick_sort}>Quick Sort</div>\r\n                <div className=\"sort-button rem\" id=\"heapS\" tabindex=\"6\" onClick={this.heap_sort}>Heap Sort</div>\r\n            </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction randomHeight(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Components\\Navbar\\Navbar.jsx",["41"],"import React, {useState} from 'react';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            speed: 'x'+1\r\n        }\r\n    }\r\n\r\n    // var [s, setSpeed]= useState(1);\r\n    // var [randomRender, clicked] = useState(false);\r\n    // var [speed, setSpeed] = useState('x'+`${s}`);\r\n    // var speed= 'x'+`${s}`;    \r\n\r\n    // console.log(randomRender);\r\n\r\n    setSpeed(x) {\r\n        this.setState({\r\n            speed: 'x'+ x\r\n        })\r\n    }\r\n\r\n    // clicked = () => {\r\n    //     window.location.reload(false)\r\n    //     randomRender= true;\r\n    //     console.log(randomRender);\r\n    // }\r\n\r\n    resetArray = () => {\r\n        this.props.resetArray(this.state.array);\r\n    }\r\n\r\n    // changeSpeed=(e)=> {\r\n    //     setSpeed(e.target.value);\r\n    // }\r\n\r\n    // function setSpeed(value) {\r\n    //     s= value;\r\n    //     console.log(s);\r\n    // }\r\n\r\n    render() {\r\n    return (\r\n        <nav className=\"nav\">\r\n            <div>\r\n                Sorting Visualizer\r\n            </div>\r\n            <div className=\"buts\">\r\n                <div className=\"button\" onClick={this.resetArray}>\r\n                    Random\r\n                </div>\r\n                <div className=\"drop\">\r\n                    <div className=\"button speed\" /*onClick={()=>setSpeed('x'+`${2*s}`)}*/>\r\n                        {this.state.speed}\r\n                    </div>\r\n                    <div className=\"drop-content\">\r\n                        \r\n                            <div value=\"1\" onClick={()=>{this.setSpeed(1)}}>x1</div>\r\n                            <div value=\"2\" onClick={()=>{this.setSpeed(2)}}>x2</div>\r\n                            <div value=\"4\" onClick={()=>{this.setSpeed(4)}}>x4</div>\r\n                            <div value=\"8\" onClick={()=>{this.setSpeed(8)}}>x8</div>\r\n\r\n                    </div>    \r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n}\r\nexport default Navbar;","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Components\\Footer\\Footer.jsx",["42"],"D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Components\\BarContainer\\BarContainer.jsx",["43","44"],"import React, {Component} from 'react';\r\nimport './BarContainer.css';\r\n\r\nexport default class BarContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const barColor = this.props.barColor;\r\n        return (\r\n            <div className=\"container\">\r\n                {this.props.array.map((value, index) => (\r\n                    <div className=\"bar\"\r\n                        key={index}\r\n                        style={{\r\n                            height: `${value}px`,\r\n                            backgroundColor: `${barColor}`\r\n                        }}></div>   \r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}","D:\\Projects\\Sorting Visualizer\\sorting_visualizer\\src\\Algorithms\\mergeSort.jsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":105,"column":16,"nodeType":"51","messageId":"52","endLine":105,"endColumn":21},{"ruleId":"49","severity":1,"message":"53","line":1,"column":16,"nodeType":"51","messageId":"52","endLine":1,"endColumn":24},{"ruleId":"49","severity":1,"message":"53","line":1,"column":16,"nodeType":"51","messageId":"52","endLine":1,"endColumn":24},{"ruleId":"49","severity":1,"message":"54","line":1,"column":16,"nodeType":"51","messageId":"52","endLine":1,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":5,"column":5,"nodeType":"57","messageId":"58","endLine":7,"endColumn":6},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'array' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Component' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]